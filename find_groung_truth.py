# -*- coding: utf-8 -*-
"""
Created on Tue Feb 11 19:54:16 2020

@author: Allen
"""
import numpy as np
import time
import sys
import os
import pandas as pd
import matplotlib.pyplot as plt
import trading_period_by_gate_mean_new
import csv
import random
import check_open_loss
path_to_average = "./2014/averageprice/"
ext_of_average = "_averagePrice_min.csv"
path_to_minprice = "./2014/minprice/"
ext_of_minprice = "_min_stock.csv"
path_to_compare = "./newstdcompare2014/"
ext_of_compare = "_table.csv"


path_to_python ="C:/Users/Allen/PT_Final"
path=os.path.dirname(os.path.abspath(__file__))+'/results/'
path_to_all_gt = "./test_actions/test5/"
ext_of_groundtruth = "_ground truth.csv"
max_posion = 5


reward_list=[]
datelist = [f.split('_')[0] for f in os.listdir(path_to_compare)]
print(datelist)
lower_bound = np.arange(0.5,8,0.05)
upper_bound = np.arange(5,25,1)

def choose_action(lower_bound,upper_bound) :
    action_list=[]
    count = 0
    l , u = 1,0
    while count < 300 :
        l = np.random.choice(lower_bound,1)
        u = np.random.choice(upper_bound,1)        
        if 1.5*l < u :
            w = np.concatenate((l,u),axis = None)
            w = list(w)
            #print(w)
            action_list.append(w)
            count +=1
    return action_list
"""    
action_list = choose_action(lower_bound, upper_bound)
actions = sorted(action_list, key = lambda s: s[0])
actions.append([15,25])
print(actions)
"""
#actions = [[0.5002033307514231, 9.999612703330783], [0.6802278275020894, 6.970301057770593], [1.1979313380281675, 14.240316901408438], [1.238262527233124, 11.421023965141616], [1.3402498377676804, 16.44159636599612], [1.4550034387895419, 22.414030261348046], [1.7906383921974274, 19.403576178513426], [1.8334690074539046, 6.07659866614364], [1.9509871600165671, 9.182797183487537], [1.9844808743169393, 5.00000000000005], [2.263022959183676, 7.842091836734736], [2.7651543942992896, 14.789548693586722], [3.1221539283805497, 16.213254943880298], [3.350909570261011, 12.044819404165569], [3.3748820754717013, 22.837853773584932], [3.5011228070175466, 6.6417543859649335], [3.6605886116442767, 9.704414587332057], [4.388342585249806, 8.21570182394924], [4.752295918367349, 14.082417582417579], [5.4250279329609, 17.403351955307247], [6.023128205128209, 23.252307692307696], [6.186773199845984, 11.237581825182907], [7.178633217993089, 15.37456747404844], [7.83320148331276, 20.010383189122425], [7.884216491924007, 18.977897421365874]]
#actions =[[0.5, 10.0], [1.3000000000000007, 23.0], [1.3500000000000008, 6.0], [1.4000000000000008, 20.0], [1.600000000000001, 12.0], [1.6500000000000008, 16.0], [1.7500000000000009, 9.0], [1.8000000000000012, 9.0], [1.9000000000000008, 19.0], [1.9500000000000013, 5.0], [2.0000000000000013, 6.0], [2.1000000000000014, 9.0], [2.200000000000001, 6.0], [2.4000000000000017, 10.0], [2.650000000000002, 12.0], [2.7500000000000018, 15.0], [2.9000000000000017, 20.0], [3.3500000000000023, 16.0], [7.900000000000008, 20.0], [100, 2000]] # number of >800 label
#actions = [[0.5,2.5],[1.0,3.0],[1.5,3.5],[2.0,4.0],[2.5,4.5],[3.0,5.0]]
#actions = [[0.5000000000000047, 9.999999999999966], [0.5876911076443143, 6.999999999999863], [0.8742723004694819, 18.711737089201883], [1.231789137380188, 5.999999999999997], [1.2728413068844713, 11.38302217036173], [1.3590389016018323, 14.336956521739136], [1.4000000000000008, 19.999999999999954], [1.4561853893866306, 22.41419710544441], [1.7218118582312023, 16.247432924809544], [1.73690727081138, 4.999999999999921], [1.784904714142428, 18.99999999999995], [1.8085359544749102, 8.000000000000005], [1.8508622147083686, 8.999999999999977], [1.8651748251748295, 7.000000000000005], [2.157863247863247, 5.9999999999998685], [2.493146677810282, 4.999999999999952], [2.783363576377437, 14.773012207192318], [2.89020866773676, 9.835072231139652], [2.8999999999999995, 20.000000000000007], [2.981865912762523, 11.999999999999998], [3.041631711409398, 16.2386744966443], [3.0622389306599844, 22.978279030910596], [3.1057039235080786, 7.556544675239042], [7.899999999999988, 19.999999999999844], [7.950000000000058, 18.999999999999858]] #number of 扣除300以下取kmeans
#numbers of < 300 
#actions = [[1.5999999999999976, 12.0], [1.6023869346733706, 16.00000000000001], [1.650000000000003, 14.000000000000002], [1.7000000000000042, 10.999999999999996], [1.8102983638113537, 4.999999999999947], [1.8651748251748241, 6.999999999999981], [1.8903076923076965, 18.999999999999964], [1.9159746463347453, 8.99999999999996], [2.0846182085168903, 7.999999999999986], [2.1578632478632516, 5.999999999999929], [2.4000000000000004, 10.000000000000009], [2.432984073763622, 21.999999999999986], [2.493146677810282, 4.999999999999958], [2.5541284403669717, 14.99999999999998], [2.798565776458954, 13.999999999999996], [2.8770398172323786, 16.185704960835483], [2.9000000000000012, 19.999999999999982], [2.972463077656029, 8.195807527393972], [2.981865912762522, 12.0], [3.12335483870968, 23.510967741935488], [3.311895910780671, 6.999999999999978], [3.6239842726081277, 9.999999999999995], [3.8110011001100137, 14.598459845984598], [7.900000000000023, 19.999999999999925], [7.949999999999958, 18.99999999999993]]
# number < 300 and > 1sigma
#actions = [[1.2051618958235575, 22.56405443453776], [1.231789137380196, 6.000000000000029], [1.359038901601831, 14.33695652173912], [1.36092703560099, 11.462812830454698], [1.4000000000000115, 20.000000000000014], [1.4083888426311382, 7.00000000000001], [1.5758556891766924, 5.000000000000011], [1.6838230972671167, 19.0], [1.7218118582312045, 16.247432924809562], [1.8085359544749187, 8.000000000000036], [1.850862214708367, 9.00000000000001], [2.1578632478632525, 6.000000000000065], [2.272758877576358, 5.000000000000066], [2.432984073763622, 22.00000000000002], [2.6697396500213415, 15.000000000000028], [2.8487746275828947, 9.999999999999991], [2.9000000000000012, 20.00000000000002], [2.972463077656029, 8.19580752739403], [2.981865912762522, 12.0], [3.0402494908350324, 7.0000000000000195], [3.041631711409398, 16.238674496644304], [3.1233548387096803, 23.51096774193548], [3.170312500000002, 13.999999999999993], [7.8999999999999995, 20.00000000000011], [7.949999999999917, 19.000000000000053]]
# number < 300 and sigma <3 >1
#actions = [[1.2051618958235566, 22.564054434537756], [1.2317891373801908, 6.0000000000000036], [1.3222769028871393, 11.0], [1.3590389016018345, 14.336956521739136], [1.4000000000000021, 20.000000000000007], [1.546812360801784, 7.1589643652561294], [1.5537195382642162, 16.319367250961953], [1.6838230972671162, 19.000000000000004], [1.8508622147083689, 9.000000000000005], [2.0293100662465666, 4.999999999999887], [2.1003714935557274, 5.999999999999912], [2.3602789699570814, 8.000000000000005], [2.4000000000000012, 10.000000000000004], [2.432984073763623, 22.000000000000004], [2.5256825938566547, 16.32366325369739], [2.5541284403669753, 15.000000000000004], [2.650000000000003, 12.000000000000002], [2.798565776458953, 14.000000000000004], [2.900000000000003, 20.000000000000007],[1000,2000]]
#actions =  [[0.6133408446003465, 20.043565348022334], [0.6557762836185819, 9.672269763651162], [0.7123126470953718, 5.0376563854822525], [1.1433818417759427, 7.290679890624436], [1.4616844455470226, 11.091664599354965], [1.4646842029194989, 18.720335308570633], [1.5278527918781692, 16.150050761421287], [1.8079859466287909, 5.99999999999997], [1.8916951729380467, 12.846636259977194], [1.9903685727286529, 4.999999999999846], [2.030242211571373, 14.706692913385783], [2.1048266865449103, 22.69250838613482], [2.2011242403781104, 9.193923024983164], [2.9250000000000016, 20.10344827586205], [2.927334267040151, 11.825552443199511], [3.254488356362935, 7.52294907720547], [3.508635996771593, 16.51957223567391], [4.2079168858495475, 14.57469752761706], [4.323914893617021, 9.632680851063803], [4.471572794899045, 12.523910733262484], [5.022148337595906, 22.808695652173878], [6.308691275167791, 18.983221476510085], [6.350792751981882, 11.6640241600604], [6.979941239316245, 15.693376068376079], [9.98977440750324, 24.99573317561555]]
#0121 actions
#actions = [[0.61324904022712, 20.043398430980105], [0.776312126211705, 5.1989069911319366], [0.9245009219914979, 10.470937224404707], [0.9815812088226723, 7.203322830134629], [1.5091524632267055, 22.27597478402984], [1.527852791878169, 16.150050761421287], [1.5375799210991734, 18.736770507414004], [1.5718010456796814, 14.725371491469451], [1.7138786246633644, 8.829335504478017], [1.9849323562570391, 12.502254791431788], [1.9903685727286529, 4.999999999999848], [2.1222512447963604, 6.231409680842454], [2.7909482160211057, 10.338053588782445], [2.9502008928571457, 23.086383928571415], [3.0699452126271876, 8.443777719801744], [3.0746052069995753, 20.23730260349976], [3.209994443672733, 14.640088901236258], [3.5096289574511017, 16.519257914902177], [3.7828111209179194, 12.131067961165044], [3.920916046319274, 7.276054590570744], [5.781510232886389, 10.55422253587393], [5.879370395177493, 22.77494976557263], [6.24432955303536, 14.525683789192806], [6.535820895522393, 18.253731343283597], [10.00000000000039, 24.999999999999815]]
#去除小於0.1% 在做kmeans
#actions = [[0.5228608966989476, 10.000000000000071], [0.546959896507091, 6.999999999999915], [0.6132584926132854, 20.043485518737484], [0.6351619919003917, 4.99999999999954], [0.8639708561020019, 9.000000000000012], [1.179748881153653, 6.000000000000028], [1.4149067049415627, 8.000000000000057], [1.4343396226415146, 22.348911465892662], [1.5131965006729389, 11.068640646029628], [1.5651308016877583, 14.734852320675081], [1.598206025047933, 7.000000000000076], [1.614435860582107, 18.70768954365797], [1.6283000902074771, 16.20507166482915], [1.7969422505615502, 5.000000000000077], [1.961350422832984, 13.0], [1.9823461730865428, 9.000000000000075], [2.079203959858973, 5.999999999999988], [2.2296322489391804, 9.999999999999995], [2.395085714285717, 12.000000000000005], [2.630607159039422, 23.2659719075669], [2.785531914893619, 13.999999999999998], [2.8639918116683747, 8.20081883316276], [2.867892644135189, 20.321073558648116], [2.9203545232273824, 15.316975200838316], [9.999999999999979, 24.99999999999971]]
#去除小於0.5% 在做kmeans
#actions = [[0.5, 10.0], [1.3000000000000007, 23.0], [1.3200000000000008, 6.0], [1.3500000000000008, 7.0], [1.4000000000000008, 20.0], [1.4500000000000008, 5.0], [1.4800000000000008, 11.0], [1.5000000000000009, 5.0],[1.52000000000000009, 8.0], [1.550000000000009, 7.0], [1.6500000000000008, 16.0], [1.7500000000000009, 15.0], [1.8000000000000012, 5.0], [1.8500000000000012, 9.0], [1.9500000000000013, 5.0], [2.0000000000000013, 6.0], [2.1000000000000014, 9.0], [2.200000000000001, 6.0], [2.2500000000000018, 5.0], [2.2500000000000018, 12.0], [2.4000000000000017, 10.0], [2.7500000000000018, 15.0], [2.9000000000000017, 20.0], [3.3500000000000023, 16.0], [10.0, 25.0]]
#actions = [[0.5,2.5],[1.0,3.0],[1.5,3.5],[2.0,4.0],[2.5,4.5],[3.0,5.0]]
#actions = [[1.4854589348420328, 5.8384380283514945], [1.6541817077696794, 20.692790391687225], [1.9498343723638463, 9.276402691192029], [2.450603013450597, 15.85155845835477], [3.5396112301374854, 12.383190501696147], [9.875061184532933, 24.908835046500066]]
actions = [[0.5, 10.0], [1.3000000000000007, 23.0], [1.4500000000000008, 5.0], [2.1000000000000014, 9.0], [2.2500000000000018, 12.0], [9.881655957107576, 24.92890762493331]]
#actions = [[1.4622012569338285, 6.038445650890253], [1.6608183997981154, 20.521990156486652], [2.4265996360327575, 9.948316651501413], [2.720519685446746, 15.122484349940422], [9.875061184532933, 24.908835046500066]]
print(len(actions))

all_actions = check_open_loss()
for index, actions in enumerate(all_actions) :
    for date in sorted(datelist):
        if date != "20140102" :
            continue
        table = pd.read_csv(path_to_compare+date+ext_of_compare)
        mindata = pd.read_csv(path_to_average+date+ext_of_average)
        tickdata = pd.read_csv(path_to_minprice+date+ext_of_minprice)
        tickdata = tickdata.iloc[166:]
        tickdata.index = np.arange(0,len(tickdata),1)
        #gt = pd.read_csv(path_to_choose2018+date+ext_of_groundtruth,usecols=["action choose"])
        #gt = gt.values
        #gt= np.array(gt)
        #gt= gt.ravel()
    
        os.chdir(path_to_python)    
        num = np.arange(0,len(table),1)
        #gt = gt.ravel()
       # print(gt[0][0])
        for pair in num: #看table有幾列配對 依序讀入
                reward = -0.000001
                open_time = 0 
                loss_time = 0
                open_nn = 0
                action_choose = 0
                #spread =  table.w1[pair] * np.log(mindata[ str(table.stock1[pair]) ]) + table.w2[pair] * np.log(mindata[ str(table.stock2[pair]) ])
                #spread = spread.T.to_numpy()
                #print(spread)
                Bth1 = np.ones((5,1))
                #print(tickdata[str(table.stock1[pair])])
                #TickTP1 = tickdata[[str(table.stock1[pair]),str(table.stock2[pair])]]
                #TickTP1 = TickTP1.T.to_numpy()
                #print(TickTP1)
                #choose = int(gt[pair])
                #open,loss = actions[gt[pair][0]]
                for open,loss in sorted(actions): #對不同開倉門檻做測試
                    #print(open,loss)
                    
                    #Bth1[2][0] = table.mu[pair]
                    #Bth1[0][0] = table.mu[pair] +table.stdev[pair]*loss
                    #Bth1[1][0] = table.mu[pair] +table.stdev[pair]*open
                    #Bth1[3][0] = table.mu[pair] -table.stdev[pair]*open
                    #Bth1[4][0] = table.mu[pair] -table.stdev[pair]*loss
                    #print(Bth1)
                    profit,opennum,trade_capital,trading =  trading_period_by_gate_mean_new.pairs( pair ,166,  table , mindata , tickdata , open ,open, 1000 ,mindata, max_posion , 0.0015, 0 , 300000000 )
                    #spread ,profit ,opennum, rt = trading_period.pairs( pair ,  table , mindata , tickdata , open , loss , max_posion , 0 , 30000000 )
                    #print("利潤 , 開倉次數,actions :",profit,opennum,action_choose)
                    #print("開倉次數 :",open_num)
    
                
                    
                    if profit > reward :
                        reward = profit
                        open_time = open
                        loss_time = loss
                        open_nn = opennum
                        action_ = action_choose
                    if open_nn == 0 and reward <= 0:
                        open_time = open
                        loss_time = loss
                        action_ = action_choose
                        
                    
                    #plotB1 = np.ones((5,len(spread)))*Bth1
                    action_choose +=1
                    """
                    plt.figure()
                    plt.plot(spread)
                    plt.plot(range(len(spread)),plotB1.T,"--")
                    plt.title("Trade open :"+str(open)+"and loss :"+str(loss)+" stock :"+str(table.stock1[pair]) +" with "+str(table.stock2[pair]))
                    #TC1fn = "Number"+str(self.count_pic)+"Pair Trading RL.png"
                    #plt.savefig(path+TC1fn)
                    plt.show()
                    plt.close()
                    """
           # print(date[0:4]) 
        #print("====================================================================================")
                flag = os.path.isfile(path_to_all_gt+str(date[0:4])+'/'+str(date)+'_ground truth.csv')
                
                if not flag :
                    df = pd.DataFrame({"stock1":[table.stock1[pair]],"stock2":[table.stock2[pair]],"open":[open_time],"loss":[loss_time],"reward":[reward],"open_num":[open_nn],"action choose":[action_]})
                    df.to_csv(path_to_all_gt+str(date[0:4])+'/'+str(date)+'_ground truth.csv', mode='w',index=False)
                else :
                    df = pd.DataFrame({"stock1":[table.stock1[pair]],"stock2":[table.stock2[pair]],"open":[open_time],"loss":[loss_time],"reward":[reward],"open_num":[open_nn],"action choose":[action_]})
                    df.to_csv(path_to_all_gt+str(date[0:4])+'/'+str(date)+'_ground truth.csv', mode='a', header=False,index=False)
                    #print(P1)
                #print(C1)
                
    
